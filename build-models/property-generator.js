const { types, reservedWords, errors } = require("../config");

class PropertyGenerator {
  constructor(params) {
    this.table = params.table;
    this.name = params.name;
    this.type = params.type;
    this.keyType = params.keyType;
    this.required = params.required;
    this.autoGenerated = params.autoGenerated;
    this.defaultValue = params.defaultValue;
  }

  validate() {
    const {
      table,
      name,
      type,
      keyType,
      required = false,
      autoGenerated = false,
      defaultValue
    } = this;
    reservedWords.validations.existsWord({ word: name });
    if (!type)
      throw new Error(errors.buildErrors.requiredType({ table, name }));
    if (typeof type !== "string") throw new Error("Type must be a string");
    if (type && !types.dataValues.find(key => key === type.toUpperCase()))
      throw new Error("The type is not allowed");
    if (typeof required !== "boolean")
      throw new Error(
        errors.buildErrors.errorType({ key: "required", type: "Boolean" })
      );

    if (
      keyType &&
      !["HASH", "RANGE"].find(key => key === keyType.toUpperCase())
    )
      throw new Error(errors.buildErrors.invalidKeyType({ table, name }));

    if (typeof autoGenerated !== "boolean")
      throw new Error(errors.buildErrors.invalidAutoGenerated({ table, name }));

    if(autoGenerated && keyType !== "HASH")
      throw new Error("You cannot set a non-hash hey as auto generated.");

    if(required && autoGenerated)
      throw new Error("A property could not be required and auto generated");

    if(defaultValue && autoGenerated)
      throw new Error ("An auto generated property could not have a defult value")
  }
}

module.exports = PropertyGenerator;
